using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    class employee6
    {
        int empno, deptno, salary,tax,sa,netpay;
        string empname, job;
        public void emp_read()
        {
            Console.WriteLine("reading empno,empname,job,deptno,salary");
        }

        public void emp_print()
        {
            Console.WriteLine("printing empno,empname,job,deptno,salary, tax, netsal");
        }

        public virtual void emp_monthly_pay()
        {
            Console.WriteLine(" base....calculating tax and netsal=salary-tax+sa etc");
        }
    }


    class employee7:employee6
    {
        public override void emp_monthly_pay()
        {
            Console.WriteLine("derive1....calculating tax+addtax and netsal=salary-tax+ hra-pf etc");
        }

        public void test()
        {
            Console.WriteLine("this is a test method");
        }
    }

    class employee8 : employee6
    {
        public override void emp_monthly_pay()
        {
            Console.WriteLine("drive2....calculating tax+addtax and netsal=salary-tax+ta+sa+pa etc");
        }
    }


    class Class17
    {
        static void Main(string[] args)
        {
            employee6 empobj;
            int key1 = 0;
            do
            {

                Console.WriteLine("poly implementation");
                Console.WriteLine("1.component version1");
                Console.WriteLine("2.component version2");
                Console.WriteLine("3.component version3");
                Console.WriteLine("Select compnent version..");
                int version = int.Parse(Console.ReadLine());

                if (version == 1)
                {
                    empobj = new employee6();
                    empobj.emp_read();
                    empobj.emp_monthly_pay();
                    empobj.emp_print();
                }
                else if (version == 2)
                {
                    empobj = new employee7();
                    empobj.emp_read();
                    empobj.emp_monthly_pay();
                    empobj.emp_print();
                }
                else if (version == 3)
                {
                    empobj = new employee8();
                    empobj.emp_read();
                    empobj.emp_monthly_pay();
                    empobj.emp_print();
                }
                Console.WriteLine("press 1 to continue 0 to exit...");
                key1 = int.Parse(Console.ReadLine());
            }
            while (key1==1);

        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{

   
    public interface calculator3
    {
        int add(int a, int b);
        int subs(int a, int b);
        int multi(int a, int b);
        int divs(int a, int b);
    }

    public interface calculator4
    {
        int mod(int a, int b);
    }

    public interface fund_transfer
    {
        bool checksourceBln(int amt);
        bool sourceDeduct();
        bool TargetAdd();
    }

    class cal_class1:calculator4,calculator3
    {
        public int add(int a,int b)
        {
            return a + b;
        }

        public int subs(int a, int b)
        {
            return a - b;
        }

        public int multi(int a, int b)
        {
            return a * b;
        }

        public int divs(int a, int b)
        {
            return a / b;
        }

        public int mod(int a, int b)
        {
            return a % b;
        }

    }


    class Class18
    {
        static void Main(string[] args)
        {
            cal_class1 obj = new cal_class1();
            int result=obj.add(10, 20);
            Console.WriteLine(result);
        }
    }
}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{

    public interface bank
    {
  
        void openAccount();
        void deposit();
        void withdraw();
        void close();
    }

    //saving account
    //corporate account
    //NRI account

    class savingAccount : bank
    {
        int ac_h_name, address, phone, depost, nominee;
        public void openAccount()
        {
            Console.WriteLine("reading saving bank account details(name,address,phone,nominee");
        }

        public void withdraw()
        {

        }

        public void deposit()
        {

        }

        public void close()
        {

        }
    }

    class CorporateAccount : bank
    {
        string cname, c_reg, gst, licence_number, turnover;

      
        public void openAccount()
        {
            Console.WriteLine("reading corporate bank account details(cname,c_reg,l_number,turnover");
        }

        public void withdraw()
        {

        }

        public void deposit()
        {

        }
        public void close()
        {

        }
    }

    class NRIAccount : bank
    {
        string name, r_staus, c_status, p_details, c_passport;
        public void openAccount()
        {
            Console.WriteLine("reading NRI bank account details(name,r_status,c_status,p_details etc");
        }

        public void withdraw()
        {

        }

        public void deposit()
        {

        }
        public void close()
        {

        }
    }

    class Class19
    {
        static void Main(string[] args)
        {
            int key1 = 0;
            Console.WriteLine("Bank Implementation using interface");

            do
            { 

            Console.WriteLine("1.Saving Account");
            Console.WriteLine("2.Corporate Account");
            Console.WriteLine("3.NRI Account");
            Console.WriteLine("Select Account type to Open..");
            int key = int.Parse(Console.ReadLine());

            bank b_object = null;

            if(key==1)
            {
                b_object = new savingAccount();
                b_object.openAccount();
            }

            else if (key ==2)
            {
                b_object = new CorporateAccount();
                b_object.openAccount();
                 
            }
            if (key == 3)
            {
                b_object = new NRIAccount();
                b_object.openAccount();
            }

                Console.WriteLine("press 1 to continue 0 to exit...");
                key1 = int.Parse(Console.ReadLine());
            }
            while (key1 == 1);
        }
    }
}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{

    abstract class d_connect
    {

        string ip, d_name;

        public d_connect(string ip,string d_name)
        {
            this.ip = ip;
            this.d_name = d_name;
        }

        public void server_connection()
        {
            Console.WriteLine("Server infor for all data services(ip address,domain..etc ip = {0} domain = {1}", ip, d_name); 
        }

        public abstract void database_con();
        public abstract void credentials();
        public abstract void objectConnect();
    }


    class oracle_conn:d_connect
    {
        string ip, d_name;
        public oracle_conn(string ip,string d_name):base(ip,d_name)
        {
            this.ip = ip;
            this.d_name = d_name;
        }

        public override void database_con()
        {
            Console.WriteLine("database connection information to connect oracle");
        }

        public override void credentials()
        {
            Console.WriteLine("credential information of oracle");
        }

        public override void objectConnect()
        {
            Console.WriteLine("way passing my sql statements to query oracle database");
        }
    }

    class sqlserver_conn : d_connect
    {
        public sqlserver_conn() : base("89:89:87:", "sqlserver")
        {

        }
        public override void database_con()
        {
            Console.WriteLine("database connection information to connect sqlserver");
        }

        public override void credentials()
        {
            Console.WriteLine("credential information of sqlserver");
        }

        public override void objectConnect()
        {
            Console.WriteLine("way passing my sql statements to query sqlserver database");
        }
    }

    class mysql_conn : d_connect
    {
        public mysql_conn() : base("89:89:77:", "mysql")
        {

        }
        public override void database_con()
        {
            Console.WriteLine("database connection information to connect mysql");
        }

        public override void credentials()
        {
            Console.WriteLine("credential information of mysql");
        }

        public override void objectConnect()
        {
            Console.WriteLine("way passing my sql statements to query mysql database");
        }
    }


    class Class20
    {
        static void Main(string[] args)
        {
            int key1 = 0;
            Console.WriteLine("Database Connection Menu");

            do
            {

                Console.WriteLine("1.Oracle connection");
                Console.WriteLine("2.sqlserver connection");
                Console.WriteLine("3.mysql connection");
                Console.WriteLine("Select the database to connect..");
                int key = int.Parse(Console.ReadLine());

                d_connect b_object = null;

                if (key == 1)
                {
                    b_object = new oracle_conn("89:89:87:", "Oracle");
                    b_object.server_connection();
                    b_object.database_con();
                    b_object.credentials();
                    b_object.objectConnect();
                }

                else if (key == 2)
                {
                    b_object = new sqlserver_conn();
                    b_object.server_connection();
                    b_object.database_con();
                    b_object.credentials();
                    b_object.objectConnect();

                }
                if (key == 3)
                {
                    b_object = new mysql_conn();
                    b_object.server_connection();
                    b_object.database_con();
                    b_object.credentials();
                    b_object.objectConnect();
                }

                Console.WriteLine("press 1 to continue 0 to exit...");
                key1 = int.Parse(Console.ReadLine());
            }
            while (key1 == 1);
        }
    }
}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{



    class Class21
    {
        static void Main(string[] args)
        {
            employee obj = new employee();

            Console.WriteLine("empno...");
            obj.empno = int.Parse(Console.ReadLine());

            Console.WriteLine("empname ...");
            obj.empname = Console.ReadLine();

            Console.WriteLine("job ...");
            obj.job = Console.ReadLine();

            Console.WriteLine("deptno...");
            obj.deptno = int.Parse(Console.ReadLine());

            Console.WriteLine("salary...");
            obj.salary = int.Parse(Console.ReadLine());

            DataConnect con = new DataConnect();
            bool flag= con.SaveData(obj);

            if(flag==true)
            {
                Console.WriteLine("Registered Successfully..");
            }
            else
            {
                Console.WriteLine("Error in data..Try Again..");
            }
           
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    class DataConnect
    {
        public bool SaveData(employee obj)
        {
            bool flag = false;
            if (tech_valid(obj) == true)
            {
                flag = true;
                //code to connect database and store data
            }
            return flag;

        }

        private bool tech_valid(employee obj)
        {
            bool flag = false;
            if(obj.salary.ToString().Length>=5)
            {
                if (f_valid(obj) == true)
                    {
                    flag = true;
                    }
            }
            return flag;
        }

       private bool f_valid(employee obj)
        {
            bool flag = false;
            if (obj.deptno<=30)
            {
                flag = true;
            }
            return flag;
        }
    }
}


