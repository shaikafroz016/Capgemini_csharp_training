exec getrec 1001

select * from emp

create trigger sal_trigger
on emp after update
as
begin
declare
@oldsal int,
@newsal int
select @oldsal=salary from deleted
select @newsal=salary from inserted
if(@oldsal>@newsal)
begin
rollback
print('new salary must be greater than old salary')
end
end

update emp set salary=10000 where empno=1001

create trigger sal_trigger1
on emp after delete
as
begin
declare
@empno int,
@empname varchar(20),
@deptno int,
@salary int
select @empno=empno,@empname=empname,@deptno=deptno,@salary=salary from deleted
insert into empbackup1 values(SUSER_SNAME(),GETDATE(),@empno,@empname,@deptno,@salary)
end

create table empbackup1(usr_name varchar(30),date_of_del date,empno int,empname varchar(20),
deptno int,salary int)

update emp set salary=10000 where empno=1001

select * from empbackup1

delete from emp where empno=1008

alter trigger time_trigger
on dept after insert,update,delete
as
begin
declare @dt int
set @dt=DATEPART(hh,getdate())
if(@dt not between 9 and 18)
begin
rollback
print('transaction will be allowed only in office time')
end
end

select * from dept
insert into dept values(90,'dev',104)

drop trigger sal_trigger1

alter table emp drop column doj



using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Data.SqlClient;
using System.Data;
using WebApplication9.Models;


namespace WebApplication9.Controllers
{
    public class EmployeeController1 : Controller
    {
        public IActionResult Index()
        {
            return View();
        }
       
        SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-RHC47KF;Initial Catalog=capegemini1;Integrated Security=True");
        List<Employee1> ls = new List<Employee1>();
        Employee1 obj;
        public IActionResult GetRec()
        {          
            con.Open();
            SqlDataAdapter ad = new SqlDataAdapter("select * from emp", con);
            DataSet ds = new DataSet();
            ad.Fill(ds, "emp1");

            for(int i=0;i<ds.Tables[0].Rows.Count;i++)
            {
                obj = new Employee1();
                obj.empno = int.Parse(ds.Tables["emp1"].Rows[i].ItemArray[0].ToString());
                obj.empname= ds.Tables["emp1"].Rows[i].ItemArray[1].ToString();
                obj.job = ds.Tables["emp1"].Rows[i].ItemArray[2].ToString();
                obj.deptno = int.Parse(ds.Tables["emp1"].Rows[i].ItemArray[3].ToString());
                obj.salary= int.Parse(ds.Tables["emp1"].Rows[i].ItemArray[4].ToString());

                ls.Add(obj);
            }



            con.Close();
            return View(ls);
        }


    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace WebApplication9.Models
{
    public class Employee1
    {
        public int empno { get; set; }
        public string empname { get; set; }
        public string job { get; set; }
        public int deptno { get; set; }
        public int salary { get; set; }
    }
}


@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model List<WebApplication9.Models.Employee1>
@{
}
<h1>Employee Details..</h1>
<hr />
<table border="1" width="70%" bgcolo="yellow">
    <tr><th>Empno</th><th>Empname</th><th>Job</th><th>Deptno</th><th>Salary</th></tr>

    @foreach(var x in Model)
            {
<tr>
    <td>@Html.DisplayFor(model => x.empno)</td>
    <td>@Html.DisplayFor(model => x.empname)</td>
    <td>@Html.DisplayFor(model => x.job)</td>
    <td>@Html.DisplayFor(model => x.deptno)</td>
    <td>@Html.DisplayFor(model => x.salary)</td>
</tr>
            }
    
</table>
